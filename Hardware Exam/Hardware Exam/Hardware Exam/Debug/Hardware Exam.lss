
Hardware Exam.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000006a6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00802000  00802000  0000071a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000020f  00802000  00802000  0000071a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000071a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000074c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  0000078c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000044ea  00000000  00000000  000007f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003c96  00000000  00000000  00004cde  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008f0  00000000  00000000  00008974  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000dc  00000000  00000000  00009264  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002e47  00000000  00000000  00009340  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000085  00000000  00000000  0000c187  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  0000c20c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__ctors_end>
   4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
   8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
   c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  10:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  14:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  18:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  1c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  20:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  24:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  28:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  2c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  30:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  34:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  38:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__vector_14>
  3c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  40:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  44:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  48:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  4c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  50:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  54:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  58:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  5c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  60:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  64:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  68:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  6c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  70:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  74:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  78:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  7c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  80:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  84:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  88:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  8c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  90:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  94:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  98:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  9c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  a0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  a4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  a8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  ac:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  b0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  b4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  b8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  bc:	0c 94 85 01 	jmp	0x30a	; 0x30a <__vector_47>
  c0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  c4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  c8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  cc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  d0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  d4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  d8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  dc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  e0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  e4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  e8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  ec:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  f0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  f4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  f8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  fc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 100:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 104:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 108:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 10c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 110:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 114:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 118:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 11c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 120:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 124:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 128:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 12c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 130:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 134:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 138:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 13c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 140:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 144:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 148:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 14c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 150:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 154:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 158:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 15c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 160:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 164:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 168:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 16c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 170:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 174:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 178:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 17c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 180:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 184:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 188:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 18c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 190:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 194:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 198:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 19c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1a0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1a4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1a8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1ac:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1b0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1b4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1b8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1bc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1c0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1c4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1c8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1cc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1d0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1d4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1d8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1dc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1e0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1e4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1e8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1ec:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1f0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1f4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1f8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>

000001fc <__ctors_end>:
 1fc:	11 24       	eor	r1, r1
 1fe:	1f be       	out	0x3f, r1	; 63
 200:	cf ef       	ldi	r28, 0xFF	; 255
 202:	cd bf       	out	0x3d, r28	; 61
 204:	df e3       	ldi	r29, 0x3F	; 63
 206:	de bf       	out	0x3e, r29	; 62
 208:	00 e0       	ldi	r16, 0x00	; 0
 20a:	0c bf       	out	0x3c, r16	; 60
 20c:	18 be       	out	0x38, r1	; 56
 20e:	19 be       	out	0x39, r1	; 57
 210:	1a be       	out	0x3a, r1	; 58
 212:	1b be       	out	0x3b, r1	; 59

00000214 <__do_copy_data>:
 214:	10 e2       	ldi	r17, 0x20	; 32
 216:	a0 e0       	ldi	r26, 0x00	; 0
 218:	b0 e2       	ldi	r27, 0x20	; 32
 21a:	e6 ea       	ldi	r30, 0xA6	; 166
 21c:	f6 e0       	ldi	r31, 0x06	; 6
 21e:	00 e0       	ldi	r16, 0x00	; 0
 220:	0b bf       	out	0x3b, r16	; 59
 222:	02 c0       	rjmp	.+4      	; 0x228 <__do_copy_data+0x14>
 224:	07 90       	elpm	r0, Z+
 226:	0d 92       	st	X+, r0
 228:	a0 30       	cpi	r26, 0x00	; 0
 22a:	b1 07       	cpc	r27, r17
 22c:	d9 f7       	brne	.-10     	; 0x224 <__do_copy_data+0x10>
 22e:	1b be       	out	0x3b, r1	; 59

00000230 <__do_clear_bss>:
 230:	22 e2       	ldi	r18, 0x22	; 34
 232:	a0 e0       	ldi	r26, 0x00	; 0
 234:	b0 e2       	ldi	r27, 0x20	; 32
 236:	01 c0       	rjmp	.+2      	; 0x23a <.do_clear_bss_start>

00000238 <.do_clear_bss_loop>:
 238:	1d 92       	st	X+, r1

0000023a <.do_clear_bss_start>:
 23a:	af 30       	cpi	r26, 0x0F	; 15
 23c:	b2 07       	cpc	r27, r18
 23e:	e1 f7       	brne	.-8      	; 0x238 <.do_clear_bss_loop>
 240:	0e 94 bf 01 	call	0x37e	; 0x37e <main>
 244:	0c 94 51 03 	jmp	0x6a2	; 0x6a2 <_exit>

00000248 <__bad_interrupt>:
 248:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000024c <CLK_32MHZ>:


void CLK_32MHZ(void)
{
	
	OSC_CTRL=0x02;     //select the 32Mhz osciliator
 24c:	82 e0       	ldi	r24, 0x02	; 2
 24e:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <__TEXT_REGION_LENGTH__+0x700050>
	while ( ((OSC_STATUS) & 0x02) != 0x02 );   //check if 32Mhz oscillator is stable
 252:	e1 e5       	ldi	r30, 0x51	; 81
 254:	f0 e0       	ldi	r31, 0x00	; 0
 256:	80 81       	ld	r24, Z
 258:	81 ff       	sbrs	r24, 1
 25a:	fd cf       	rjmp	.-6      	; 0x256 <CLK_32MHZ+0xa>
	//if not stable. keep looping
	
	CPU_CCP= 0xD8;                       //write IOREG to CPU_CCP to enable change
 25c:	88 ed       	ldi	r24, 0xD8	; 216
 25e:	84 bf       	out	0x34, r24	; 52
	CLK_CTRL= 0x01;						//select the 32Mhz oscillator
 260:	91 e0       	ldi	r25, 0x01	; 1
 262:	90 93 40 00 	sts	0x0040, r25	; 0x800040 <__TEXT_REGION_LENGTH__+0x700040>
	CPU_CCP= 0xD8;						//write IOREG to CPU_CCP to enable change
 266:	84 bf       	out	0x34, r24	; 52
	CLK_PSCTRL= 0x00;					//0x00 for the prescaler
 268:	10 92 41 00 	sts	0x0041, r1	; 0x800041 <__TEXT_REGION_LENGTH__+0x700041>
 26c:	08 95       	ret

0000026e <USARTD0_init>:
	
}

void USARTD0_init(void)
{
	PORTD_DIRSET=0x08;   //set transmitter as output
 26e:	88 e0       	ldi	r24, 0x08	; 8
 270:	80 93 61 06 	sts	0x0661, r24	; 0x800661 <__TEXT_REGION_LENGTH__+0x700661>
	PORTD_DIRCLR=0X04;	 //set receiver as input
 274:	94 e0       	ldi	r25, 0x04	; 4
 276:	90 93 62 06 	sts	0x0662, r25	; 0x800662 <__TEXT_REGION_LENGTH__+0x700662>
	
	USARTD0_CTRLB=0x18;  //enable receiver and transmitter
 27a:	98 e1       	ldi	r25, 0x18	; 24
 27c:	90 93 a4 09 	sts	0x09A4, r25	; 0x8009a4 <__TEXT_REGION_LENGTH__+0x7009a4>
	USARTD0_CTRLC= 0b00100011; //USART asynchronous, 8 data bit, odd parity, 1 stop bit
 280:	93 e2       	ldi	r25, 0x23	; 35
 282:	90 93 a5 09 	sts	0x09A5, r25	; 0x8009a5 <__TEXT_REGION_LENGTH__+0x7009a5>
	
	USARTD0_BAUDCTRLA= 0x9D;    //load lowest 8 bits of BSEL
 286:	9d e9       	ldi	r25, 0x9D	; 157
 288:	90 93 a6 09 	sts	0x09A6, r25	; 0x8009a6 <__TEXT_REGION_LENGTH__+0x7009a6>
	USARTD0_BAUDCTRLB= (0x01| 0xE0); //load BSCALE and upper 4 bits of BSEL. bitwise OR them
 28c:	91 ee       	ldi	r25, 0xE1	; 225
 28e:	90 93 a7 09 	sts	0x09A7, r25	; 0x8009a7 <__TEXT_REGION_LENGTH__+0x7009a7>
	
	PORTD_OUTSET= 0x08;   //set transit pin idle
 292:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <__TEXT_REGION_LENGTH__+0x700665>
 296:	08 95       	ret

00000298 <IN_CHAR>:
}


uint8_t IN_CHAR(void) {
	
	while( (USARTD0_STATUS & 0x80) != 0x80);			//keep looping if DREIF flag is not set
 298:	e1 ea       	ldi	r30, 0xA1	; 161
 29a:	f9 e0       	ldi	r31, 0x09	; 9
 29c:	80 81       	ld	r24, Z
 29e:	88 23       	and	r24, r24
 2a0:	ec f7       	brge	.-6      	; 0x29c <IN_CHAR+0x4>
	
	return USARTD0_DATA;
 2a2:	80 91 a0 09 	lds	r24, 0x09A0	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
	
}
 2a6:	08 95       	ret

000002a8 <OUT_CHAR>:

void OUT_CHAR(uint8_t data) {
	
	while( ((USARTD0_STATUS) & 0x20) != 0x20);			//keep looping if DREIF flag is not set
 2a8:	e1 ea       	ldi	r30, 0xA1	; 161
 2aa:	f9 e0       	ldi	r31, 0x09	; 9
 2ac:	90 81       	ld	r25, Z
 2ae:	95 ff       	sbrs	r25, 5
 2b0:	fd cf       	rjmp	.-6      	; 0x2ac <OUT_CHAR+0x4>
	
	USARTD0_DATA= (uint8_t) data;
 2b2:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 2b6:	08 95       	ret

000002b8 <__vector_14>:
	
}

ISR(TCC0_OVF_vect) {
 2b8:	1f 92       	push	r1
 2ba:	0f 92       	push	r0
 2bc:	0f b6       	in	r0, 0x3f	; 63
 2be:	0f 92       	push	r0
 2c0:	11 24       	eor	r1, r1
 2c2:	08 b6       	in	r0, 0x38	; 56
 2c4:	0f 92       	push	r0
 2c6:	18 be       	out	0x38, r1	; 56
 2c8:	0b b6       	in	r0, 0x3b	; 59
 2ca:	0f 92       	push	r0
 2cc:	1b be       	out	0x3b, r1	; 59
 2ce:	8f 93       	push	r24
 2d0:	ef 93       	push	r30
 2d2:	ff 93       	push	r31
	DACA_CH1DATAH=Wave[j];
 2d4:	e0 91 00 20 	lds	r30, 0x2000	; 0x802000 <__data_end>
 2d8:	f0 e0       	ldi	r31, 0x00	; 0
 2da:	ee 0f       	add	r30, r30
 2dc:	ff 1f       	adc	r31, r31
 2de:	e2 5f       	subi	r30, 0xF2	; 242
 2e0:	ff 4d       	sbci	r31, 0xDF	; 223
 2e2:	80 81       	ld	r24, Z
 2e4:	80 93 1b 03 	sts	0x031B, r24	; 0x80031b <__TEXT_REGION_LENGTH__+0x70031b>
	j++;
 2e8:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__data_end>
 2ec:	8f 5f       	subi	r24, 0xFF	; 255
 2ee:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__data_end>
	
}
 2f2:	ff 91       	pop	r31
 2f4:	ef 91       	pop	r30
 2f6:	8f 91       	pop	r24
 2f8:	0f 90       	pop	r0
 2fa:	0b be       	out	0x3b, r0	; 59
 2fc:	0f 90       	pop	r0
 2fe:	08 be       	out	0x38, r0	; 56
 300:	0f 90       	pop	r0
 302:	0f be       	out	0x3f, r0	; 63
 304:	0f 90       	pop	r0
 306:	1f 90       	pop	r1
 308:	18 95       	reti

0000030a <__vector_47>:

ISR(TCE0_OVF_vect) {
 30a:	1f 92       	push	r1
 30c:	0f 92       	push	r0
 30e:	0f b6       	in	r0, 0x3f	; 63
 310:	0f 92       	push	r0
 312:	11 24       	eor	r1, r1
 314:	08 b6       	in	r0, 0x38	; 56
 316:	0f 92       	push	r0
 318:	18 be       	out	0x38, r1	; 56
	TCC0_CTRLA=TC_CLKSEL_OFF_gc ; //stop the first timer to stop playing sound
 31a:	10 92 00 08 	sts	0x0800, r1	; 0x800800 <__TEXT_REGION_LENGTH__+0x700800>
	TCE0_CTRLA=TC_CLKSEL_OFF_gc;  //turns off timer
 31e:	10 92 00 0a 	sts	0x0A00, r1	; 0x800a00 <__TEXT_REGION_LENGTH__+0x700a00>
	
	
}
 322:	0f 90       	pop	r0
 324:	08 be       	out	0x38, r0	; 56
 326:	0f 90       	pop	r0
 328:	0f be       	out	0x3f, r0	; 63
 32a:	0f 90       	pop	r0
 32c:	1f 90       	pop	r1
 32e:	18 95       	reti

00000330 <PWM>:

void PWM(void) {
	PORTD_DIRSET=0x70;    //set RGB as output
 330:	80 e7       	ldi	r24, 0x70	; 112
 332:	80 93 61 06 	sts	0x0661, r24	; 0x800661 <__TEXT_REGION_LENGTH__+0x700661>
	PORTD_OUTSET=0X70;    //turn them off
 336:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <__TEXT_REGION_LENGTH__+0x700665>
	PORTD_REMAP= 0b00000111;   //remap Compare channel to 3 LED
 33a:	87 e0       	ldi	r24, 0x07	; 7
 33c:	80 93 6e 06 	sts	0x066E, r24	; 0x80066e <__TEXT_REGION_LENGTH__+0x70066e>
	TCD0_PER=0x00FF;
 340:	2f ef       	ldi	r18, 0xFF	; 255
 342:	30 e0       	ldi	r19, 0x00	; 0
 344:	20 93 26 09 	sts	0x0926, r18	; 0x800926 <__TEXT_REGION_LENGTH__+0x700926>
 348:	30 93 27 09 	sts	0x0927, r19	; 0x800927 <__TEXT_REGION_LENGTH__+0x700927>
	TCD0_CTRLA=TC_CLKSEL_DIV1024_gc;   //16 bit number. so i have to use just the CLK. timer prescaler of 1
 34c:	80 93 00 09 	sts	0x0900, r24	; 0x800900 <__TEXT_REGION_LENGTH__+0x700900>
    TCD0_CTRLB= TC_WGMODE_SINGLESLOPE_gc | TC0_CCAEN_bm | TC0_CCBEN_bm | TC0_CCCEN_bm ;
 350:	83 e7       	ldi	r24, 0x73	; 115
 352:	80 93 01 09 	sts	0x0901, r24	; 0x800901 <__TEXT_REGION_LENGTH__+0x700901>
	//TCD0_CTRLB=0b01110011;
	TCD0_CCC=0x00;   //blue
 356:	10 92 2c 09 	sts	0x092C, r1	; 0x80092c <__TEXT_REGION_LENGTH__+0x70092c>
 35a:	10 92 2d 09 	sts	0x092D, r1	; 0x80092d <__TEXT_REGION_LENGTH__+0x70092d>
	
	TCD0_CCB=0x00;   //green
 35e:	10 92 2a 09 	sts	0x092A, r1	; 0x80092a <__TEXT_REGION_LENGTH__+0x70092a>
 362:	10 92 2b 09 	sts	0x092B, r1	; 0x80092b <__TEXT_REGION_LENGTH__+0x70092b>
	
	TCD0_CCA=0x00;     //red
 366:	10 92 28 09 	sts	0x0928, r1	; 0x800928 <__TEXT_REGION_LENGTH__+0x700928>
 36a:	10 92 29 09 	sts	0x0929, r1	; 0x800929 <__TEXT_REGION_LENGTH__+0x700929>
	
	PORTD_PIN6CTRL=0b01000000;	  //PD6 is blue
 36e:	80 e4       	ldi	r24, 0x40	; 64
 370:	80 93 76 06 	sts	0x0676, r24	; 0x800676 <__TEXT_REGION_LENGTH__+0x700676>
	PORTD_PIN5CTRL=0b01000000;    //PD5 is green
 374:	80 93 75 06 	sts	0x0675, r24	; 0x800675 <__TEXT_REGION_LENGTH__+0x700675>
	PORTD_PIN4CTRL=0b01000000;    //PD4 is red
 378:	80 93 74 06 	sts	0x0674, r24	; 0x800674 <__TEXT_REGION_LENGTH__+0x700674>
 37c:	08 95       	ret

0000037e <main>:
	
	//disp (round(((4095/2)*sin((2*pi*i)/255))+(4095/2)));     
	// %change 4095 to corresponding amplitude. change i for no of samples
	
	
	CLK_32MHZ();
 37e:	0e 94 26 01 	call	0x24c	; 0x24c <CLK_32MHZ>
	//TIMER_INIT();
	//DAC();
	USARTD0_init();
 382:	0e 94 37 01 	call	0x26e	; 0x26e <USARTD0_init>
	PWM();
 386:	0e 94 98 01 	call	0x330	; 0x330 <PWM>
	
	

	
	PWM();
 38a:	0e 94 98 01 	call	0x330	; 0x330 <PWM>
		OUT_CHAR('R');
		OUT_CHAR(':');
		red=IN_CHAR();             //for red
		OUT_CHAR(red);
		red=red-48;
		red=red*100;
 38e:	0f 2e       	mov	r0, r31
 390:	f4 e6       	ldi	r31, 0x64	; 100
 392:	df 2e       	mov	r13, r31
 394:	f0 2d       	mov	r31, r0
		
		red3=IN_CHAR();
		if (red3==13) {
			OUT_CHAR(0xD);
			OUT_CHAR(0xA);
			red=red/10;
 396:	0f 2e       	mov	r0, r31
 398:	fd ec       	ldi	r31, 0xCD	; 205
 39a:	cf 2e       	mov	r12, r31
 39c:	f0 2d       	mov	r31, r0
		
		red2=IN_CHAR();
		if (red2==13) {
			OUT_CHAR(0xD);
			OUT_CHAR(0xA);
			red=red/100;
 39e:	0f 2e       	mov	r0, r31
 3a0:	f9 e2       	ldi	r31, 0x29	; 41
 3a2:	bf 2e       	mov	r11, r31
 3a4:	f0 2d       	mov	r31, r0
		
		
		
		OUT:;
		
		TCD0_CCA=redf;
 3a6:	0f 2e       	mov	r0, r31
 3a8:	f8 e2       	ldi	r31, 0x28	; 40
 3aa:	ef 2e       	mov	r14, r31
 3ac:	f9 e0       	ldi	r31, 0x09	; 9
 3ae:	ff 2e       	mov	r15, r31
 3b0:	f0 2d       	mov	r31, r0
		TCD0_CCC=bluef;   //blue
 3b2:	0c e2       	ldi	r16, 0x2C	; 44
 3b4:	19 e0       	ldi	r17, 0x09	; 9
		TCD0_CCB=greenf;   //green
 3b6:	ca e2       	ldi	r28, 0x2A	; 42
 3b8:	d9 e0       	ldi	r29, 0x09	; 9
		
		
	
		
		
		OUT_CHAR('R');
 3ba:	82 e5       	ldi	r24, 0x52	; 82
 3bc:	0e 94 54 01 	call	0x2a8	; 0x2a8 <OUT_CHAR>
		OUT_CHAR(':');
 3c0:	8a e3       	ldi	r24, 0x3A	; 58
 3c2:	0e 94 54 01 	call	0x2a8	; 0x2a8 <OUT_CHAR>
		red=IN_CHAR();             //for red
 3c6:	0e 94 4c 01 	call	0x298	; 0x298 <IN_CHAR>
 3ca:	80 93 08 20 	sts	0x2008, r24	; 0x802008 <red>
		OUT_CHAR(red);
 3ce:	0e 94 54 01 	call	0x2a8	; 0x2a8 <OUT_CHAR>
		red=red-48;
		red=red*100;
 3d2:	80 91 08 20 	lds	r24, 0x2008	; 0x802008 <red>
 3d6:	80 53       	subi	r24, 0x30	; 48
 3d8:	8d 9d       	mul	r24, r13
 3da:	80 2d       	mov	r24, r0
 3dc:	11 24       	eor	r1, r1
 3de:	80 93 08 20 	sts	0x2008, r24	; 0x802008 <red>
		
		red2=IN_CHAR();
 3e2:	0e 94 4c 01 	call	0x298	; 0x298 <IN_CHAR>
 3e6:	80 93 09 20 	sts	0x2009, r24	; 0x802009 <red2>
		if (red2==13) {
 3ea:	8d 30       	cpi	r24, 0x0D	; 13
 3ec:	89 f4       	brne	.+34     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
			OUT_CHAR(0xD);
 3ee:	0e 94 54 01 	call	0x2a8	; 0x2a8 <OUT_CHAR>
			OUT_CHAR(0xA);
 3f2:	8a e0       	ldi	r24, 0x0A	; 10
 3f4:	0e 94 54 01 	call	0x2a8	; 0x2a8 <OUT_CHAR>
			red=red/100;
 3f8:	80 91 08 20 	lds	r24, 0x2008	; 0x802008 <red>
 3fc:	8b 9d       	mul	r24, r11
 3fe:	81 2d       	mov	r24, r1
 400:	11 24       	eor	r1, r1
 402:	82 95       	swap	r24
 404:	8f 70       	andi	r24, 0x0F	; 15
 406:	80 93 08 20 	sts	0x2008, r24	; 0x802008 <red>
			redf=red;
 40a:	80 93 04 20 	sts	0x2004, r24	; 0x802004 <redf>
			goto GREEN;
 40e:	4b c0       	rjmp	.+150    	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
		}
		
		OUT_CHAR(red2);
 410:	0e 94 54 01 	call	0x2a8	; 0x2a8 <OUT_CHAR>
		red2=red2-48;
		red2=red2*10;
 414:	80 91 09 20 	lds	r24, 0x2009	; 0x802009 <red2>
 418:	80 53       	subi	r24, 0x30	; 48
 41a:	88 0f       	add	r24, r24
 41c:	98 2f       	mov	r25, r24
 41e:	99 0f       	add	r25, r25
 420:	99 0f       	add	r25, r25
 422:	89 0f       	add	r24, r25
 424:	80 93 09 20 	sts	0x2009, r24	; 0x802009 <red2>
		
		
		red3=IN_CHAR();
 428:	0e 94 4c 01 	call	0x298	; 0x298 <IN_CHAR>
 42c:	80 93 0b 20 	sts	0x200B, r24	; 0x80200b <red3>
		if (red3==13) {
 430:	8d 30       	cpi	r24, 0x0D	; 13
 432:	f9 f4       	brne	.+62     	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
			OUT_CHAR(0xD);
 434:	0e 94 54 01 	call	0x2a8	; 0x2a8 <OUT_CHAR>
			OUT_CHAR(0xA);
 438:	8a e0       	ldi	r24, 0x0A	; 10
 43a:	0e 94 54 01 	call	0x2a8	; 0x2a8 <OUT_CHAR>
			red=red/10;
 43e:	80 91 08 20 	lds	r24, 0x2008	; 0x802008 <red>
 442:	8c 9d       	mul	r24, r12
 444:	81 2d       	mov	r24, r1
 446:	11 24       	eor	r1, r1
 448:	28 2f       	mov	r18, r24
 44a:	26 95       	lsr	r18
 44c:	26 95       	lsr	r18
 44e:	26 95       	lsr	r18
 450:	20 93 08 20 	sts	0x2008, r18	; 0x802008 <red>
			red2=red2/10;
 454:	90 91 09 20 	lds	r25, 0x2009	; 0x802009 <red2>
 458:	9c 9d       	mul	r25, r12
 45a:	91 2d       	mov	r25, r1
 45c:	11 24       	eor	r1, r1
 45e:	89 2f       	mov	r24, r25
 460:	86 95       	lsr	r24
 462:	86 95       	lsr	r24
 464:	86 95       	lsr	r24
 466:	80 93 09 20 	sts	0x2009, r24	; 0x802009 <red2>
			redf=red+red2;
 46a:	82 0f       	add	r24, r18
 46c:	80 93 04 20 	sts	0x2004, r24	; 0x802004 <redf>
			goto GREEN;
 470:	1a c0       	rjmp	.+52     	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
		}
		
		
		OUT_CHAR(red3);
 472:	0e 94 54 01 	call	0x2a8	; 0x2a8 <OUT_CHAR>
		red3=red3-48;
 476:	80 91 0b 20 	lds	r24, 0x200B	; 0x80200b <red3>
 47a:	80 53       	subi	r24, 0x30	; 48
 47c:	80 93 0b 20 	sts	0x200B, r24	; 0x80200b <red3>
		redf=red+red2+red3;
 480:	20 91 08 20 	lds	r18, 0x2008	; 0x802008 <red>
 484:	90 91 09 20 	lds	r25, 0x2009	; 0x802009 <red2>
 488:	92 0f       	add	r25, r18
 48a:	89 0f       	add	r24, r25
 48c:	80 93 04 20 	sts	0x2004, r24	; 0x802004 <redf>
		
		input=IN_CHAR();
 490:	0e 94 4c 01 	call	0x298	; 0x298 <IN_CHAR>
 494:	80 93 05 20 	sts	0x2005, r24	; 0x802005 <input>
		if (input==13) {
 498:	8d 30       	cpi	r24, 0x0D	; 13
 49a:	29 f4       	brne	.+10     	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
			OUT_CHAR(0xD);
 49c:	0e 94 54 01 	call	0x2a8	; 0x2a8 <OUT_CHAR>
			OUT_CHAR(0xA);
 4a0:	8a e0       	ldi	r24, 0x0A	; 10
 4a2:	0e 94 54 01 	call	0x2a8	; 0x2a8 <OUT_CHAR>
		
		
		
		
GREEN:;
		OUT_CHAR('G');            //GREEN
 4a6:	87 e4       	ldi	r24, 0x47	; 71
 4a8:	0e 94 54 01 	call	0x2a8	; 0x2a8 <OUT_CHAR>
		OUT_CHAR(':');
 4ac:	8a e3       	ldi	r24, 0x3A	; 58
 4ae:	0e 94 54 01 	call	0x2a8	; 0x2a8 <OUT_CHAR>
		green=IN_CHAR();
 4b2:	0e 94 4c 01 	call	0x298	; 0x298 <IN_CHAR>
 4b6:	80 93 07 20 	sts	0x2007, r24	; 0x802007 <green>
		OUT_CHAR(green);
 4ba:	0e 94 54 01 	call	0x2a8	; 0x2a8 <OUT_CHAR>
		green=green-48;
		green=green*100;
 4be:	80 91 07 20 	lds	r24, 0x2007	; 0x802007 <green>
 4c2:	80 53       	subi	r24, 0x30	; 48
 4c4:	8d 9d       	mul	r24, r13
 4c6:	80 2d       	mov	r24, r0
 4c8:	11 24       	eor	r1, r1
 4ca:	80 93 07 20 	sts	0x2007, r24	; 0x802007 <green>
		
		green2=IN_CHAR();
 4ce:	0e 94 4c 01 	call	0x298	; 0x298 <IN_CHAR>
 4d2:	80 93 0d 20 	sts	0x200D, r24	; 0x80200d <green2>
		if (green2==13) {
 4d6:	8d 30       	cpi	r24, 0x0D	; 13
 4d8:	89 f4       	brne	.+34     	; 0x4fc <__LOCK_REGION_LENGTH__+0xfc>
			OUT_CHAR(0xD);
 4da:	0e 94 54 01 	call	0x2a8	; 0x2a8 <OUT_CHAR>
			OUT_CHAR(0xA);
 4de:	8a e0       	ldi	r24, 0x0A	; 10
 4e0:	0e 94 54 01 	call	0x2a8	; 0x2a8 <OUT_CHAR>
			green=green/100;
 4e4:	80 91 07 20 	lds	r24, 0x2007	; 0x802007 <green>
 4e8:	8b 9d       	mul	r24, r11
 4ea:	81 2d       	mov	r24, r1
 4ec:	11 24       	eor	r1, r1
 4ee:	82 95       	swap	r24
 4f0:	8f 70       	andi	r24, 0x0F	; 15
 4f2:	80 93 07 20 	sts	0x2007, r24	; 0x802007 <green>
			greenf=green;
 4f6:	80 93 0c 20 	sts	0x200C, r24	; 0x80200c <greenf>
			goto BLUE;
 4fa:	4b c0       	rjmp	.+150    	; 0x592 <__LOCK_REGION_LENGTH__+0x192>
		}
		
		
		OUT_CHAR(green2);
 4fc:	0e 94 54 01 	call	0x2a8	; 0x2a8 <OUT_CHAR>
		green2=green2-48;
		green2=green2*10;
 500:	80 91 0d 20 	lds	r24, 0x200D	; 0x80200d <green2>
 504:	80 53       	subi	r24, 0x30	; 48
 506:	88 0f       	add	r24, r24
 508:	98 2f       	mov	r25, r24
 50a:	99 0f       	add	r25, r25
 50c:	99 0f       	add	r25, r25
 50e:	89 0f       	add	r24, r25
 510:	80 93 0d 20 	sts	0x200D, r24	; 0x80200d <green2>
		
		green3=IN_CHAR();
 514:	0e 94 4c 01 	call	0x298	; 0x298 <IN_CHAR>
 518:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <green3>
		if (green3==13) {
 51c:	8d 30       	cpi	r24, 0x0D	; 13
 51e:	f9 f4       	brne	.+62     	; 0x55e <__LOCK_REGION_LENGTH__+0x15e>
			OUT_CHAR(0xD);
 520:	0e 94 54 01 	call	0x2a8	; 0x2a8 <OUT_CHAR>
			OUT_CHAR(0xA);
 524:	8a e0       	ldi	r24, 0x0A	; 10
 526:	0e 94 54 01 	call	0x2a8	; 0x2a8 <OUT_CHAR>
			green=green/10;
 52a:	80 91 07 20 	lds	r24, 0x2007	; 0x802007 <green>
 52e:	8c 9d       	mul	r24, r12
 530:	81 2d       	mov	r24, r1
 532:	11 24       	eor	r1, r1
 534:	28 2f       	mov	r18, r24
 536:	26 95       	lsr	r18
 538:	26 95       	lsr	r18
 53a:	26 95       	lsr	r18
 53c:	20 93 07 20 	sts	0x2007, r18	; 0x802007 <green>
			green2=green2/10;
 540:	90 91 0d 20 	lds	r25, 0x200D	; 0x80200d <green2>
 544:	9c 9d       	mul	r25, r12
 546:	91 2d       	mov	r25, r1
 548:	11 24       	eor	r1, r1
 54a:	89 2f       	mov	r24, r25
 54c:	86 95       	lsr	r24
 54e:	86 95       	lsr	r24
 550:	86 95       	lsr	r24
 552:	80 93 0d 20 	sts	0x200D, r24	; 0x80200d <green2>
			greenf=green+green2;
 556:	82 0f       	add	r24, r18
 558:	80 93 0c 20 	sts	0x200C, r24	; 0x80200c <greenf>
			goto BLUE;
 55c:	1a c0       	rjmp	.+52     	; 0x592 <__LOCK_REGION_LENGTH__+0x192>
		}
		
		OUT_CHAR(green3);
 55e:	0e 94 54 01 	call	0x2a8	; 0x2a8 <OUT_CHAR>
		green3=green3-48;
 562:	80 91 06 20 	lds	r24, 0x2006	; 0x802006 <green3>
 566:	80 53       	subi	r24, 0x30	; 48
 568:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <green3>
		greenf=green+green2+green3;
 56c:	20 91 07 20 	lds	r18, 0x2007	; 0x802007 <green>
 570:	90 91 0d 20 	lds	r25, 0x200D	; 0x80200d <green2>
 574:	92 0f       	add	r25, r18
 576:	89 0f       	add	r24, r25
 578:	80 93 0c 20 	sts	0x200C, r24	; 0x80200c <greenf>
		
		input=IN_CHAR();
 57c:	0e 94 4c 01 	call	0x298	; 0x298 <IN_CHAR>
 580:	80 93 05 20 	sts	0x2005, r24	; 0x802005 <input>
		if (input==13) {
 584:	8d 30       	cpi	r24, 0x0D	; 13
 586:	29 f4       	brne	.+10     	; 0x592 <__LOCK_REGION_LENGTH__+0x192>
			OUT_CHAR(0xD);
 588:	0e 94 54 01 	call	0x2a8	; 0x2a8 <OUT_CHAR>
			OUT_CHAR(0xA);
 58c:	8a e0       	ldi	r24, 0x0A	; 10
 58e:	0e 94 54 01 	call	0x2a8	; 0x2a8 <OUT_CHAR>
		}
		
BLUE:;		
		OUT_CHAR('B');				//BLUE
 592:	82 e4       	ldi	r24, 0x42	; 66
 594:	0e 94 54 01 	call	0x2a8	; 0x2a8 <OUT_CHAR>
		OUT_CHAR(':');
 598:	8a e3       	ldi	r24, 0x3A	; 58
 59a:	0e 94 54 01 	call	0x2a8	; 0x2a8 <OUT_CHAR>
		blue=IN_CHAR();
 59e:	0e 94 4c 01 	call	0x298	; 0x298 <IN_CHAR>
 5a2:	80 93 03 20 	sts	0x2003, r24	; 0x802003 <blue>
		OUT_CHAR(blue);
 5a6:	0e 94 54 01 	call	0x2a8	; 0x2a8 <OUT_CHAR>
		blue=blue-48;
		blue=blue*100;
 5aa:	80 91 03 20 	lds	r24, 0x2003	; 0x802003 <blue>
 5ae:	80 53       	subi	r24, 0x30	; 48
 5b0:	8d 9d       	mul	r24, r13
 5b2:	80 2d       	mov	r24, r0
 5b4:	11 24       	eor	r1, r1
 5b6:	80 93 03 20 	sts	0x2003, r24	; 0x802003 <blue>
		
		blue2=IN_CHAR();
 5ba:	0e 94 4c 01 	call	0x298	; 0x298 <IN_CHAR>
 5be:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <blue2>
		if (blue2==13) {
 5c2:	8d 30       	cpi	r24, 0x0D	; 13
 5c4:	89 f4       	brne	.+34     	; 0x5e8 <__LOCK_REGION_LENGTH__+0x1e8>
			OUT_CHAR(0xD);
 5c6:	0e 94 54 01 	call	0x2a8	; 0x2a8 <OUT_CHAR>
			OUT_CHAR(0xA);
 5ca:	8a e0       	ldi	r24, 0x0A	; 10
 5cc:	0e 94 54 01 	call	0x2a8	; 0x2a8 <OUT_CHAR>
			blue=blue/100;
 5d0:	80 91 03 20 	lds	r24, 0x2003	; 0x802003 <blue>
 5d4:	8b 9d       	mul	r24, r11
 5d6:	81 2d       	mov	r24, r1
 5d8:	11 24       	eor	r1, r1
 5da:	82 95       	swap	r24
 5dc:	8f 70       	andi	r24, 0x0F	; 15
 5de:	80 93 03 20 	sts	0x2003, r24	; 0x802003 <blue>
			bluef=blue;
 5e2:	80 93 01 20 	sts	0x2001, r24	; 0x802001 <bluef>
			goto OUT;
 5e6:	4b c0       	rjmp	.+150    	; 0x67e <__LOCK_REGION_LENGTH__+0x27e>
		}
		
		
		OUT_CHAR(blue2);
 5e8:	0e 94 54 01 	call	0x2a8	; 0x2a8 <OUT_CHAR>
		blue2=blue2-48;
		blue2=blue2*10;
 5ec:	80 91 02 20 	lds	r24, 0x2002	; 0x802002 <blue2>
 5f0:	80 53       	subi	r24, 0x30	; 48
 5f2:	88 0f       	add	r24, r24
 5f4:	98 2f       	mov	r25, r24
 5f6:	99 0f       	add	r25, r25
 5f8:	99 0f       	add	r25, r25
 5fa:	89 0f       	add	r24, r25
 5fc:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <blue2>
		
		
		
		blue3=IN_CHAR();
 600:	0e 94 4c 01 	call	0x298	; 0x298 <IN_CHAR>
 604:	80 93 0a 20 	sts	0x200A, r24	; 0x80200a <blue3>
		if (blue3==13) {
 608:	8d 30       	cpi	r24, 0x0D	; 13
 60a:	f9 f4       	brne	.+62     	; 0x64a <__LOCK_REGION_LENGTH__+0x24a>
			OUT_CHAR(0xD);
 60c:	0e 94 54 01 	call	0x2a8	; 0x2a8 <OUT_CHAR>
			OUT_CHAR(0xA);
 610:	8a e0       	ldi	r24, 0x0A	; 10
 612:	0e 94 54 01 	call	0x2a8	; 0x2a8 <OUT_CHAR>
			blue=blue/10;
 616:	80 91 03 20 	lds	r24, 0x2003	; 0x802003 <blue>
 61a:	8c 9d       	mul	r24, r12
 61c:	81 2d       	mov	r24, r1
 61e:	11 24       	eor	r1, r1
 620:	28 2f       	mov	r18, r24
 622:	26 95       	lsr	r18
 624:	26 95       	lsr	r18
 626:	26 95       	lsr	r18
 628:	20 93 03 20 	sts	0x2003, r18	; 0x802003 <blue>
			blue2=blue2/10;
 62c:	90 91 02 20 	lds	r25, 0x2002	; 0x802002 <blue2>
 630:	9c 9d       	mul	r25, r12
 632:	91 2d       	mov	r25, r1
 634:	11 24       	eor	r1, r1
 636:	89 2f       	mov	r24, r25
 638:	86 95       	lsr	r24
 63a:	86 95       	lsr	r24
 63c:	86 95       	lsr	r24
 63e:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <blue2>
			bluef=blue+blue2;
 642:	82 0f       	add	r24, r18
 644:	80 93 01 20 	sts	0x2001, r24	; 0x802001 <bluef>
			goto OUT;
 648:	1a c0       	rjmp	.+52     	; 0x67e <__LOCK_REGION_LENGTH__+0x27e>
		}
		
		OUT_CHAR(blue3);
 64a:	0e 94 54 01 	call	0x2a8	; 0x2a8 <OUT_CHAR>
		blue3=blue3-48;
 64e:	80 91 0a 20 	lds	r24, 0x200A	; 0x80200a <blue3>
 652:	80 53       	subi	r24, 0x30	; 48
 654:	80 93 0a 20 	sts	0x200A, r24	; 0x80200a <blue3>
		bluef=blue+blue2+blue3;
 658:	20 91 03 20 	lds	r18, 0x2003	; 0x802003 <blue>
 65c:	90 91 02 20 	lds	r25, 0x2002	; 0x802002 <blue2>
 660:	92 0f       	add	r25, r18
 662:	89 0f       	add	r24, r25
 664:	80 93 01 20 	sts	0x2001, r24	; 0x802001 <bluef>
		
		input=IN_CHAR();
 668:	0e 94 4c 01 	call	0x298	; 0x298 <IN_CHAR>
 66c:	80 93 05 20 	sts	0x2005, r24	; 0x802005 <input>
		if (input==13) {
 670:	8d 30       	cpi	r24, 0x0D	; 13
 672:	29 f4       	brne	.+10     	; 0x67e <__LOCK_REGION_LENGTH__+0x27e>
			OUT_CHAR(0xD);
 674:	0e 94 54 01 	call	0x2a8	; 0x2a8 <OUT_CHAR>
			OUT_CHAR(0xA);
 678:	8a e0       	ldi	r24, 0x0A	; 10
 67a:	0e 94 54 01 	call	0x2a8	; 0x2a8 <OUT_CHAR>
		
		
		
		OUT:;
		
		TCD0_CCA=redf;
 67e:	80 91 04 20 	lds	r24, 0x2004	; 0x802004 <redf>
 682:	90 e0       	ldi	r25, 0x00	; 0
 684:	f7 01       	movw	r30, r14
 686:	80 83       	st	Z, r24
 688:	91 83       	std	Z+1, r25	; 0x01
		TCD0_CCC=bluef;   //blue
 68a:	80 91 01 20 	lds	r24, 0x2001	; 0x802001 <bluef>
 68e:	90 e0       	ldi	r25, 0x00	; 0
 690:	f8 01       	movw	r30, r16
 692:	80 83       	st	Z, r24
 694:	91 83       	std	Z+1, r25	; 0x01
		TCD0_CCB=greenf;   //green
 696:	80 91 0c 20 	lds	r24, 0x200C	; 0x80200c <greenf>
 69a:	90 e0       	ldi	r25, 0x00	; 0
 69c:	88 83       	st	Y, r24
 69e:	99 83       	std	Y+1, r25	; 0x01
		
	
		
		
		
	}
 6a0:	8c ce       	rjmp	.-744    	; 0x3ba <main+0x3c>

000006a2 <_exit>:
 6a2:	f8 94       	cli

000006a4 <__stop_program>:
 6a4:	ff cf       	rjmp	.-2      	; 0x6a4 <__stop_program>
